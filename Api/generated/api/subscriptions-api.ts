/* tslint:disable */
/* eslint-disable */
/**
 * 
 * This API includes ways to manipulate documents,xchanges,subscriptions,partners,notifiers,notifications,login and adapters. 
 *
 * The version of the OpenAPI document: V3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Dictionarystringstring } from '../models';
// @ts-ignore
import { InlineResponse2003 } from '../models';
// @ts-ignore
import { InlineResponse2004 } from '../models';
// @ts-ignore
import { ModelBoolean } from '../models';
// @ts-ignore
import { ModelObject } from '../models';
// @ts-ignore
import { SubscriptionCreate } from '../models';
// @ts-ignore
import { SubscriptionUpdate } from '../models';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsGet: async (filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (lookup !== undefined) {
                localVarQueryParameter['lookup'] = lookup;
            }

            if (searchPhrase !== undefined) {
                localVarQueryParameter['searchPhrase'] = searchPhrase;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyAggregatenowPost: async (body: ModelObject, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiSubscriptionsKeyAggregatenowPost', 'body', body)
            const localVarPath = `/api/subscriptions/{key}/aggregatenow`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyGet: async (key?: number, lookup?: ModelBoolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscriptions/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"lookup"}}`, encodeURIComponent(String(lookup)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyPausePost: async (body: ModelObject, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiSubscriptionsKeyPausePost', 'body', body)
            const localVarPath = `/api/subscriptions/{key}/pause`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscriptionUpdate} subscriptionUpdate Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyPost: async (subscriptionUpdate: SubscriptionUpdate, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionUpdate' is not null or undefined
            assertParamExists('apiSubscriptionsKeyPost', 'subscriptionUpdate', subscriptionUpdate)
            const localVarPath = `/api/subscriptions/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyReceivenowPost: async (body: ModelObject, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiSubscriptionsKeyReceivenowPost', 'body', body)
            const localVarPath = `/api/subscriptions/{key}/receivenow`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscriptionCreate} subscriptionCreate Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsPost: async (subscriptionCreate: SubscriptionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionCreate' is not null or undefined
            assertParamExists('apiSubscriptionsPost', 'subscriptionCreate', subscriptionCreate)
            const localVarPath = `/api/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsGet(filter, sort, size, page, count, lookup, searchPhrase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsKeyAggregatenowPost(body: ModelObject, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsKeyAggregatenowPost(body, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsKeyGet(key?: number, lookup?: ModelBoolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsKeyGet(key, lookup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsKeyPausePost(body: ModelObject, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsKeyPausePost(body, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubscriptionUpdate} subscriptionUpdate Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsKeyPost(subscriptionUpdate: SubscriptionUpdate, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsKeyPost(subscriptionUpdate, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsKeyReceivenowPost(body: ModelObject, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsKeyReceivenowPost(body, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubscriptionCreate} subscriptionCreate Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubscriptionsPost(subscriptionCreate: SubscriptionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubscriptionsPost(subscriptionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.apiSubscriptionsGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyAggregatenowPost(body: ModelObject, key?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubscriptionsKeyAggregatenowPost(body, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyGet(key?: number, lookup?: ModelBoolean, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.apiSubscriptionsKeyGet(key, lookup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyPausePost(body: ModelObject, key?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubscriptionsKeyPausePost(body, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionUpdate} subscriptionUpdate Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyPost(subscriptionUpdate: SubscriptionUpdate, key?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubscriptionsKeyPost(subscriptionUpdate, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsKeyReceivenowPost(body: ModelObject, key?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubscriptionsKeyReceivenowPost(body, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionCreate} subscriptionCreate Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubscriptionsPost(subscriptionCreate: SubscriptionCreate, options?: any): AxiosPromise<number> {
            return localVarFp.apiSubscriptionsPost(subscriptionCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sort] 
     * @param {string} [size] 
     * @param {string} [page] 
     * @param {string} [count] 
     * @param {ModelBoolean} [lookup] 
     * @param {string} [searchPhrase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModelObject} body Command Body
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsKeyAggregatenowPost(body: ModelObject, key?: number, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsKeyAggregatenowPost(body, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [key] 
     * @param {ModelBoolean} [lookup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsKeyGet(key?: number, lookup?: ModelBoolean, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsKeyGet(key, lookup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModelObject} body Command Body
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsKeyPausePost(body: ModelObject, key?: number, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsKeyPausePost(body, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionUpdate} subscriptionUpdate Command Body
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsKeyPost(subscriptionUpdate: SubscriptionUpdate, key?: number, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsKeyPost(subscriptionUpdate, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModelObject} body Command Body
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsKeyReceivenowPost(body: ModelObject, key?: number, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsKeyReceivenowPost(body, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionCreate} subscriptionCreate Command Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public apiSubscriptionsPost(subscriptionCreate: SubscriptionCreate, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).apiSubscriptionsPost(subscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }
}
