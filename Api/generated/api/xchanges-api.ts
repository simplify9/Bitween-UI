/* tslint:disable */
/* eslint-disable */
/**
 * 
 * This API includes ways to manipulate documents,xchanges,subscriptions,partners,notifiers,notifications,login and adapters. 
 *
 * The version of the OpenAPI document: V3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateXchange } from '../models';
// @ts-ignore
import { Dictionarystringstring } from '../models';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { ModelBoolean } from '../models';
// @ts-ignore
import { ModelObject } from '../models';
// @ts-ignore
import { XchangeBulkRetry } from '../models';
// @ts-ignore
import { XchangeRetry } from '../models';
/**
 * XchangesApi - axios parameter creator
 * @export
 */
export const XchangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {XchangeBulkRetry} xchangeBulkRetry Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesBulkretryPost: async (xchangeBulkRetry: XchangeBulkRetry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xchangeBulkRetry' is not null or undefined
            assertParamExists('apiXchangesBulkretryPost', 'xchangeBulkRetry', xchangeBulkRetry)
            const localVarPath = `/api/xchanges/bulkretry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(xchangeBulkRetry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesGet: async (filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/xchanges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (lookup !== undefined) {
                localVarQueryParameter['lookup'] = lookup;
            }

            if (searchPhrase !== undefined) {
                localVarQueryParameter['searchPhrase'] = searchPhrase;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyGet: async (key?: string, lookup?: ModelBoolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/xchanges/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)))
                .replace(`{${"lookup"}}`, encodeURIComponent(String(lookup)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyInternalGet: async (key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/xchanges/{key}/internal`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyPost: async (body: ModelObject, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiXchangesKeyPost', 'body', body)
            const localVarPath = `/api/xchanges/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {XchangeRetry} xchangeRetry Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyRetryPost: async (xchangeRetry: XchangeRetry, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xchangeRetry' is not null or undefined
            assertParamExists('apiXchangesKeyRetryPost', 'xchangeRetry', xchangeRetry)
            const localVarPath = `/api/xchanges/{key}/retry`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(xchangeRetry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateXchange} createXchange Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesPost: async (createXchange: CreateXchange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createXchange' is not null or undefined
            assertParamExists('apiXchangesPost', 'createXchange', createXchange)
            const localVarPath = `/api/xchanges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createXchange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesStatuslistGet: async (filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/xchanges/statuslist`
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)))
                .replace(`{${"page"}}`, encodeURIComponent(String(page)))
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"lookup"}}`, encodeURIComponent(String(lookup)))
                .replace(`{${"searchPhrase"}}`, encodeURIComponent(String(searchPhrase)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XchangesApi - functional programming interface
 * @export
 */
export const XchangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = XchangesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {XchangeBulkRetry} xchangeBulkRetry Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesBulkretryPost(xchangeBulkRetry: XchangeBulkRetry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesBulkretryPost(xchangeBulkRetry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesGet(filter, sort, size, page, count, lookup, searchPhrase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesKeyGet(key?: string, lookup?: ModelBoolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesKeyGet(key, lookup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesKeyInternalGet(key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesKeyInternalGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesKeyPost(body: ModelObject, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesKeyPost(body, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {XchangeRetry} xchangeRetry Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesKeyRetryPost(xchangeRetry: XchangeRetry, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesKeyRetryPost(xchangeRetry, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateXchange} createXchange Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesPost(createXchange: CreateXchange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesPost(createXchange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiXchangesStatuslistGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiXchangesStatuslistGet(filter, sort, size, page, count, lookup, searchPhrase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * XchangesApi - factory interface
 * @export
 */
export const XchangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = XchangesApiFp(configuration)
    return {
        /**
         * 
         * @param {XchangeBulkRetry} xchangeBulkRetry Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesBulkretryPost(xchangeBulkRetry: XchangeBulkRetry, options?: any): AxiosPromise<void> {
            return localVarFp.apiXchangesBulkretryPost(xchangeBulkRetry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.apiXchangesGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {ModelBoolean} [lookup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyGet(key?: string, lookup?: ModelBoolean, options?: any): AxiosPromise<object> {
            return localVarFp.apiXchangesKeyGet(key, lookup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyInternalGet(key?: number, options?: any): AxiosPromise<object> {
            return localVarFp.apiXchangesKeyInternalGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModelObject} body Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyPost(body: ModelObject, key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiXchangesKeyPost(body, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {XchangeRetry} xchangeRetry Command Body
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesKeyRetryPost(xchangeRetry: XchangeRetry, key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiXchangesKeyRetryPost(xchangeRetry, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateXchange} createXchange Command Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesPost(createXchange: CreateXchange, options?: any): AxiosPromise<number> {
            return localVarFp.apiXchangesPost(createXchange, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sort] 
         * @param {string} [size] 
         * @param {string} [page] 
         * @param {string} [count] 
         * @param {ModelBoolean} [lookup] 
         * @param {string} [searchPhrase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiXchangesStatuslistGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.apiXchangesStatuslistGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * XchangesApi - object-oriented interface
 * @export
 * @class XchangesApi
 * @extends {BaseAPI}
 */
export class XchangesApi extends BaseAPI {
    /**
     * 
     * @param {XchangeBulkRetry} xchangeBulkRetry Command Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesBulkretryPost(xchangeBulkRetry: XchangeBulkRetry, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesBulkretryPost(xchangeBulkRetry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sort] 
     * @param {string} [size] 
     * @param {string} [page] 
     * @param {string} [count] 
     * @param {ModelBoolean} [lookup] 
     * @param {string} [searchPhrase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {ModelBoolean} [lookup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesKeyGet(key?: string, lookup?: ModelBoolean, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesKeyGet(key, lookup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesKeyInternalGet(key?: number, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesKeyInternalGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModelObject} body Command Body
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesKeyPost(body: ModelObject, key?: string, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesKeyPost(body, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {XchangeRetry} xchangeRetry Command Body
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesKeyRetryPost(xchangeRetry: XchangeRetry, key?: string, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesKeyRetryPost(xchangeRetry, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateXchange} createXchange Command Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesPost(createXchange: CreateXchange, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesPost(createXchange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sort] 
     * @param {string} [size] 
     * @param {string} [page] 
     * @param {string} [count] 
     * @param {ModelBoolean} [lookup] 
     * @param {string} [searchPhrase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XchangesApi
     */
    public apiXchangesStatuslistGet(filter?: string, sort?: string, size?: string, page?: string, count?: string, lookup?: ModelBoolean, searchPhrase?: string, options?: AxiosRequestConfig) {
        return XchangesApiFp(this.configuration).apiXchangesStatuslistGet(filter, sort, size, page, count, lookup, searchPhrase, options).then((request) => request(this.axios, this.basePath));
    }
}
