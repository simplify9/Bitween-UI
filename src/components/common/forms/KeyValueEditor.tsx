import {KeyValuePair, OptionType} from "src/types/common";
import Button from "./Button";
import React, {useState} from "react";
import Modal from "../Modal";
import FormField from "./FormField";
import TextEditor from "./TextEditor";
import {ChoiceEditor} from "./ChoiceEditor";
import {MdModeEditOutline, MdOutlineRemoveCircle} from "react-icons/md";
import {HiPlusCircle} from "react-icons/hi"

type Props = Omit<JSX.IntrinsicElements['input'], "onChange"> & {
    onAdd?: (value: KeyValuePair) => void
    onRemove?: (value: KeyValuePair) => void
    values?: KeyValuePair[]
    title?: string,
    keyLabel?: string,
    valueLabel?: string
    valueAutoGeneratedOnAdd?: boolean
    addLabel?: string
    keyOptions?: OptionType[]
    onEdit?: (value: KeyValuePair) => void
    hideEmptyLabel?: boolean
}

const Component: React.FC<Props> = ({

                                        values,
                                        onAdd,
                                        onRemove,
                                        title,
                                        keyLabel,
                                        valueLabel,
                                        addLabel,
                                        valueAutoGeneratedOnAdd,
                                        keyOptions,
                                        hideEmptyLabel,
                                        onEdit
                                    }) => {

    const [mode, setMode] = useState<"NONE" | "EDIT" | "ADD">("NONE");


    const [newKeyValue, setNewKeyValue] = useState<KeyValuePair>({
        key: '',
        value: ''
    });

    const onCloseModal = () => {
        setMode("NONE")
        setNewKeyValue({
            key: '',
            value: ''
        })
    }

    const onAddSubmit = () => {
        if (newKeyValue) {
            onAdd!(newKeyValue)
            setNewKeyValue({key: '', value: ''})
            onCloseModal()
        }
    }
    const onEditSubmit = () => {
        if (newKeyValue) {
            onEdit?.(newKeyValue)
            setNewKeyValue({key: '', value: ''})
            onCloseModal()
        }
    }

    const onPressEdit = (value: KeyValuePair) => {
        setNewKeyValue(value)
        setMode("EDIT")
    }

    return (
        <div className={"w-100 w-full bg-white "}>
            {(['EDIT', 'ADD'].includes(mode)) &&
                <Modal onClose={onCloseModal} submitLabel={"Save"}
                       onSubmit={() => mode === "EDIT" ? onEditSubmit() : onAddSubmit()}>
                    <div
                        className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left grow pr-5">
                        <h3 className="text-lg leading-6 font-medium text-gray-900"
                            id="modal-title">{addLabel}</h3>
                        <div className="mt-4">
                            <FormField title={keyLabel ?? ""} className="grow">
                                {(!keyOptions || mode === "EDIT") &&
                                    <TextEditor
                                        disabled={mode === "EDIT"}
                                        placeholder={`Type in the ${keyLabel}...`}
                                        value={newKeyValue.key}
                                        onChange={(t) => setNewKeyValue({
                                            ...newKeyValue,
                                            key: t
                                        })}/>
                                }
                                {
                                    (keyOptions && mode !== "EDIT") && <ChoiceEditor options={keyOptions}
                                                                                     optionValue={(item) => item.id}
                                                                                     optionTitle={(item) => item.title}
                                                                                     value={newKeyValue.key}
                                                                                     disabled={keyOptions?.length == 0}
                                                                                     onChange={(t) => setNewKeyValue({
                                                                                         ...newKeyValue,
                                                                                         key: t
                                                                                     })}/>
                                }

                            </FormField>
                        </div>
                        {!valueAutoGeneratedOnAdd && <div className="mt-4">
                            <FormField title={valueLabel ?? ""} className="grow">
                                <textarea className={"w-full border rounded-md shadow p-1"}
                                          onChange={(t) => setNewKeyValue({
                                              ...newKeyValue,
                                              value: t.target.value
                                          })} value={newKeyValue?.value}/>
                            </FormField>
                        </div>}
                    </div>
                </Modal>}
            <table className="appearance-none w-full max-w-100">
                <thead className="border-y bg-gray-50">
                <tr>
                    <th scope="col"
                        className="text-md font-semibold  text-slate-800 px-6 py-2 text-left">
                        {title}
                    </th>
                    <th scope="col"
                        className="text-sm font-medium text-gray-900 px-6 py-2 text-left">

                    </th>
                    <th scope="col"
                        className="text-sm font-medium text-gray-900 px-6 py-2 text-right">
                        {
                            keyOptions?.length != 0 &&
                            <div onClick={() => setMode("ADD")}
                                 className={"text-green-600 rounded w-5 h-5"}><HiPlusCircle
                                size={25}/></div>
                        }

                    </th>
                </tr>
                <tr>
                    <th scope="col"
                        className="text-sm font-medium text-gray-900 px-6 py-2 text-left">
                        {keyLabel}
                    </th>
                    <th scope="col"
                        className="text-sm font-medium text-gray-900 px-6 py-2 text-left">
                        {valueLabel}
                    </th>
                    <th scope="col"
                        className="text-sm font-medium text-gray-900 px-6 py-2 text-left">

                    </th>
                </tr>
                </thead>
                <tbody>
                {
                    values && values.length > 0 ?
                        values?.map((i) => (
                            <tr key={`${i.key}_${i.value}`} className="bg-white border-b">
                                <td
                                    className="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                                    {i.key}
                                </td>
                                <td
                                    className="text-sm w-100 text-gray-900 font-light px-4 py-4 break-all">
                                    {i.value}
                                </td>
                                <td
                                    className="text-sm text-gray-900 flex items-center font-light px-6 py-4 ">
                                    {
                                        onEdit && <Button variant={"none"} onClick={() => {
                                            onPressEdit(i)
                                        }}>
                                            <MdModeEditOutline className={"text-yellow-300"} size={21}/>
                                        </Button>
                                    }

                                    <Button
                                        variant={"none"}
                                        onClick={() => onRemove!(i)}
                                    >
                                        <MdOutlineRemoveCircle className={"text-primary-600"} size={21}/>
                                    </Button>
                                </td>


                            </tr>
                        )) : <tr>{((!hideEmptyLabel) &&
                            <td colSpan={3} className={"px-4 py-3"}>No {title}</td>)}
                        </tr>
                }
                </tbody>
            </table>
        </div>
    );
};

export default Component;
