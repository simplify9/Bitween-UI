import {useNavigate, useParams} from "react-router-dom";
import Button from "./common/forms/Button";
import FormField from "./common/forms/FormField";
import TextEditor from "./common/forms/TextEditor";
import {useEffect, useState} from "react";
import {apiClient} from "../client";
import {IPartner, UpdatePartner} from "../types/partners";
import {KeyValuePair} from "../types/common";
import KeyValueEditor from "./common/forms/KeyValueEditor";
import Authorize from "src/components/common/authorize/authorize";


const Component = () => {
    const navigate = useNavigate();
    const {id} = useParams();
    const [partner, setPartner] = useState<IPartner>();
    const [updatePartnerData, setUpdatePartnerData] = useState<UpdatePartner>({});

    useEffect(() => {
        if (id) {
            refreshPartner(id);
        }

    }, [id]);
    useEffect(() => {
        setUpdatePartnerData({
            name: partner?.name,
            apiCredentials: partner?.apiCredentials
        })
    }, [partner])

    const refreshPartner = async (id: string) => {
        let res = await apiClient.findPartner(id);
        if (res.succeeded) setPartner(res.data);
    }

    const updatePartner = async () => {
        let res = await apiClient.updatePartner(id!, updatePartnerData);
        if (res.succeeded) await refreshPartner(id!);
    }
    const deletePartner = async () => {
        let res = await apiClient.deletePartner(id!);
        if (res.succeeded) navigate('/partners')
    }

    const addApiKey = async (kv: KeyValuePair) => {
        let pparr = updatePartnerData.apiCredentials;
        let res = await apiClient.generatePartnerKey();
        if (res.succeeded) {
            kv.value = res.data
            pparr?.push(kv);
            setUpdatePartnerData({...updatePartnerData, apiCredentials: pparr})
        }

    }
    const removeApiKey = (kv: KeyValuePair) => {
        let pparr: KeyValuePair[] = [];
        updatePartnerData.apiCredentials?.forEach(pp => {
            if (pp.value != kv.value && pp.key != kv.key) pparr.push(pp);
        });
        setUpdatePartnerData({...updatePartnerData, apiCredentials: pparr})
    }

    return (
        <div className="flex flex-col w-full px-8 py-5 md:w-[650px]">
            <div className="justify-between w-full flex py-4">
                <div className="text-2xl font-bold tracking-wide text-gray-700">Partners</div>
                <div className={"flex gap-2"}>

                    <Button onClick={deletePartner}
                            className="bg-red-600 hover:bg-red-500 text-white py-2 px-4 rounded">
                        Delete
                    </Button>

                </div>
            </div>
            <div className="  w-full mb-6 group">
                <FormField title="ID" className="grow">
                    <TextEditor disabled={true} value={id}/>
                </FormField>
            </div>
            <div className="  w-full mb-6 group">
                <FormField title="Name" className="grow">
                    <TextEditor value={updatePartnerData?.name} onChange={(t) => setUpdatePartnerData({
                        ...updatePartnerData,
                        name: t
                    })}/>
                </FormField>
            </div>
            <div className="  w-full mb-6 group flex w-full ">

                <Authorize roles={["Admin", "Editor"]}>

                    <KeyValueEditor hideEmptyLabel values={updatePartnerData?.apiCredentials} title={'Api Credentials'}
                                    keyLabel={"Name"} valueLabel={"Key"}
                                    onAdd={addApiKey} onRemove={removeApiKey} addLabel={"Add New Api Credentials"}
                                    valueAutoGeneratedOnAdd={true}
                    />
                </Authorize>

            </div>
            <div className="  w-full pt-3 mb-6 group flex w-full justify-between">


                <div className="w-full ">
                    <div
                        className="text-2xl w-full bg-gray-100 py-2 font-bold tracking-wide px-5 text-gray-700">Subscriptions
                    </div>
                    <table className=" min-w-full">
                        <thead className="border-y bg-gray-50">
                        <tr>
                            <th scope="col" className="text-sm font-medium text-gray-900 px-6 py-2 text-left">
                                ID
                            </th>
                            <th scope="col" className="text-sm font-medium text-gray-900 px-6 py-2 text-left">
                                Name
                            </th>
                            <th scope="col" className="text-sm font-medium text-gray-900 px-6 py-2 text-left">
                                Type
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {
                            partner?.subscriptions?.map((i) => (
                                <tr key={i.id} className="bg-white border-b">
                                    <td className="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                                        {i.id}
                                    </td>
                                    <td className="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                                        {i.name}
                                    </td>
                                    <td className="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                                        {i.type}
                                    </td>

                                </tr>
                            ))

                        }

                        </tbody>
                    </table>

                </div>

            </div>
            <div className={"flex w-full gap-2"}>
                <Button
                    onClick={() => navigate('/partners')}
                    className="text-white bg-gray-500 hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm  grow sm:w-auto px-5 py-2.5 text-center">Cancel
                </Button>
                <Authorize roles={["Admin", "Editor"]}>
                    <Button
                        onClick={updatePartner}
                        className="text-white bg-blue-800 hover:bg-blue-500 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm  grow sm:w-auto px-5 py-2.5 text-center">Save
                    </Button>
                </Authorize>
            </div>


        </div>
    );
}

export default Component;
